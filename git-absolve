#!/bin/sh -eu

show_help () { cat <<EOF
Usage: git absolve <commit> [<commit>]
Show the number of lines which were changed or removed since a given
commit, grouped by their former blamee.

Suppose we want to take the absolve between master and my-feature-branch.  The
algorithm is effectively the following:
(1) Take the diff between master and my-feature-branch.
(2) For each line coloured red, run git blame on it.
(3) Take the person who git blames and add 1 to their score.
For each person, we also show the timestamp of their most recent line.

This is meant to give an indication of whose code it is that my-feature-branch
is messing with. Perhaps you should consider CCing the top-scorers when you
start the code-review?

OUTPUT FORMAT

Suppose the current branch is based off dev, and git absolve gives the
following output:

    $ git absolve dev
    Jane Doe <jane@example.com> (21 lines, 2016-10-20)

This means that the current branch changes 21 lines by Jane Doe, the most
recent of which was authored on 2016-10-20.

OTHER EXAMPLES

    git absolve master dev
    Show who was absolved between master and dev.

    git absolve master
    Show who was absolved between master and HEAD.

    eval "git format-patch \$BASE" \$(git absolve --cc \$BASE)
    Prepare emails for \$BASE..HEAD, automatically CCing the relevant people.
EOF
}

# Parse the output of `git diff` into a format readable by `git blame`. Take
# only the ranges on the "removed" side of the diff. Ignore ranges of length 0.
# Eg., the diff
#     --- a/Foo/Bar.hs
#     +++ b/Foo/Qux.hs
#     @@ -16,2 +17,3 @@
#     ...
#     @@ -23 +24,0 @@
#     ...
# becomes
#     Foo/Bar.hs	-L 16,+2 -L 23,+1
diff_ranges='
BEGIN { file = "UNKNOWN"; flags = "" }
match($0, /^--- a\/(.*)/, m) {
  if(flags != "") { printf("%s\t%s\n", file, flags) };
  file = m[1];
  flags = "";
}
match($0, /^@@ -([0-9,]+) \+([0-9,]+) @@/, m) {
  split(m[1], range, ",");
  if(range[2] == "") { range[2] = "1" };
  if(range[2] != "0") {
    flags = sprintf("%s -L %s,+%s", flags, range[1], range[2])
  };
}
END {
  if(flags != "") { printf("%s\t%s\n", file, flags) };
}'

if [ "${1:-}" = "-h" ]; then show_help; exit 0; fi

BASE="${1:-}"       # The revision we're diffing from
HEAD="${2:-HEAD}"   # The revision we're diffing to
CONTEXT="${3:-0}"    # How much context to include

# Is it more reliable to use 'git blame --show-email'?
git diff --unified="$CONTEXT" "$BASE" "$HEAD" |   # diff branch against base
    gawk "$diff_ranges" |                # convert diff to ranges
    while read file ranges; do           # run git-blame on ranges
        git blame --date=short $ranges "$BASE" -- "$file"; done |
    sed -r -e 's/[^\(]*\(([^\)]*)\).*/\1/' \
           -e 's/(.*[^ ])\s+([^ ]+)\s+[0-9]+/  \2   \1/' | # extract author and date
    sort -k2d -k1dr,1 |     # sort on author then date
    uniq -f1 -c |           # uniq on author, counting
    sort -k1nr,1 |          # sort on count
    while read linenum timestamp author; do     # format nicely
        pretty_author=$(git log -1 "$BASE" --author="$author" --pretty="%aN <%aE>")
        echo "$pretty_author ($linenum lines, $timestamp)"
    done
